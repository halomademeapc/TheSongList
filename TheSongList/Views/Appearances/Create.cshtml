@model TheSongList.Models.Entities.Appearance

@{
    ViewData["Title"] = "Add Appearance";
    var IsEpisode = string.IsNullOrEmpty(Context.Request.Query["episode"].ToString()) ? false : true;
}

<h4>Add Appearance</h4>
<hr />
<form asp-action="Create">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="EpisodeId" class="control-label"></label>
                <select asp-for="EpisodeId" class="form-control" asp-items="ViewBag.EpisodeId"></select>
                <span asp-validation-for="EpisodeId" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="SongId" class="control-label"></label>
                <select asp-for="SongId" class="form-control" asp-items="ViewBag.SongId"></select>
                <span asp-validation-for="SongId" class="text-danger"></span>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => IsEpisode)
    <div class="form-group">
        <a href="javascript:history.back()" class="btn btn-light">Cancel</a>
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>


@section Scripts {
    <script>
        $.fn.selectpicker.Constructor.DEFAULTS.liveSearch = true;

        $(document).ready(function () {
            $('#@Html.IdFor(m => m.EpisodeId)').selectpicker('val', '@Context.Request.Query["episode"].ToString()');
            $('#@Html.IdFor(m => m.SongId)').selectpicker('val', '@Context.Request.Query["song"].ToString()');
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
