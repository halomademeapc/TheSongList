@inject SearchService search

@{
    ViewData["Title"] = "Index";
    string query = Context.Request.Query["query"].ToString();
    int currentPage = int.TryParse(Context.Request.Query["page"], out var i) ? i : 1;
    bool descending = Context.Request.Query["direction"].ToString() == "desc";
    string orderPropertyName = Context.Request.Query["order"].ToString();
    System.Linq.Expressions.Expression<Func<Song, object>> order;
    switch (orderPropertyName)
    {
        case "artist":
            order = s => s.Artist.Name;
            break;
        case "era":
            order = s => s.Era.SortOrder;
            break;
        default:
            order = s => s.Name;
            break;
    }

    var results = await search.FindSongs(query, currentPage, order, descending);
    var dummy = new Song();
}

<div class="d-flex justify-content-between align-items-center">
    <h2>Songs</h2>
    <a class="btn btn-outline-primary my-3" asp-action="Create">
        <i class="fas fa-plus mr-2"></i>
        Create New
    </a>
</div>

<div class="btn-toolbar d-flex justify-content-end flex-wrap" role="toolbar">
    <form asp-action="Index" method="get" class="input-group my-2 mr-2">
        <input type="text" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="btnGroupAddon" name="query">
        <div class="input-group-append">
            <button type="submit" class="btn btn-outline-secondary" id="btnGroupAddon">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </form>
    <div class="btn-group my-2" role="group">
        @foreach (var l in results.Info.Links)
        {
            <a asp-route-order="@orderPropertyName" asp-route-direction="@(descending ? "desc" : "asc")"
               asp-route-query="@query" asp-route-page="@l" class="btn @(l == currentPage ? "btn-secondary disabled" : "btn-outline-secondary")">
                @l
            </a>
        }
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => dummy.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => dummy.Artist)
            </th>
            <th>
                @Html.DisplayNameFor(model => dummy.Era)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in results.Data)
        {
            <tr style="color: @(!string.IsNullOrEmpty(item.Era?.Color) ? item.Era.Color : "black")">
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Artist.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Era.Label)
                </td>
                <td>
                    <a class="mx-2" asp-action="Edit" asp-route-id="@item.Id">
                        <i class="fas fa-edit"></i>
                    </a>
                    <a class="mx-2" asp-action="Details" asp-route-id="@item.Id">
                        <i class="fas fa-info-circle"></i>
                    </a>
                    <a class="mx-2" asp-action="Delete" asp-route-id="@item.Id">
                        <i class="fas fa-trash"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="btn-toolbar d-flex justify-content-end flex-wrap" role="toolbar">
    <div class="btn-group my-2" role="group">
        @foreach (var l in results.Info.Links)
        {
            <a asp-route-order="@orderPropertyName" asp-route-direction="@(descending ? "desc" : "asc")"
               asp-route-query="@query" asp-route-page="@l" class="btn @(l == currentPage ? "btn-secondary disabled" : "btn-outline-secondary")">
                @l
            </a>
        }
    </div>
</div>